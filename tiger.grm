structure A = Absyn

open Symbol

datatype lvalue_suffix = DotID of symbol
                       | ArrayIdx of A.exp

fun retrive_suffix(v, DotID(idsym)::xs, pos) =
      retrive_suffix(A.FieldVar(v, idsym, pos), xs, pos)
  | retrive_suffix(v, ArrayIdx(arrayidx)::xs, pos) =
      retrive_suffix(A.SubscriptVar(v, arrayidx, pos), xs, pos)
  | retrive_suffix(v, nil, pos) = v

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | NEG

%nonterm
  exp of A.exp
  | program of A.exp
  | funparams of A.exp list
  | recordfields of (symbol * A.exp * pos) list
  | sequence of A.exp
  | sequence_suffix of (A.exp * pos) list
  | dec of A.dec
  | tydec of {name: symbol, ty: A.ty, pos: pos}
  | tydecs of {name: symbol, ty: A.ty, pos: pos} list
  | vardec of A.dec
  | fundec of A.fundec | fundecs of A.fundec list
  | decs of A.dec list
  | ty of A.ty | tyfields of A.field list
  | lvalue of A.var
  | lvalue_back of lvalue_suffix list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc FUNCTION VAR TYPE THEN DO OF ASSIGN
%right ELSE
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left NEG
%%

program	: exp				(exp)

exp:
  lvalue
    (A.VarExp (lvalue))
  | NIL
    (A.NilExp)
  | INT
    (A.IntExp (INT))
  | STRING
    (A.StringExp (STRING, STRINGleft))
  (* function call *)
  | ID LPAREN funparams RPAREN
    (A.CallExp {func = symbol ID, args = funparams, pos = IDleft})
  (* + - * / Negative *)
  | exp PLUS exp
    (A.OpExp({left = exp1, oper = A.PlusOp, right = exp2, pos = exp1left}))
  | exp MINUS exp
    (A.OpExp({left = exp1, oper = A.MinusOp, right = exp2, pos = exp1left}))
  | exp TIMES exp
    (A.OpExp({left = exp1, oper = A.TimesOp, right = exp2, pos = exp1left}))
  | exp DIVIDE exp
    (A.OpExp({left = exp1, oper = A.DivideOp, right = exp2, pos = exp1left}))
  | MINUS exp %prec NEG
    (A.OpExp({left = A.IntExp(0),
              oper = A.MinusOp,
              right = exp,
              pos = MINUSleft})
    )
  (* eq series *)
  | exp EQ exp
    (A.OpExp({left = exp1, oper = A.EqOp, right = exp2, pos = exp1left}))
  | exp NEQ exp
    (A.OpExp({left = exp1, oper = A.NeqOp, right = exp2, pos = exp1left}))
  | exp LT exp
    (A.OpExp({left = exp1, oper = A.LtOp, right = exp2, pos = exp1left}))
  | exp LE exp
    (A.OpExp({left = exp1, oper = A.LeOp, right = exp2, pos = exp1left}))
  | exp GT exp
    (A.OpExp({left = exp1, oper = A.GtOp, right = exp2, pos = exp1left}))
  | exp GE exp
    (A.OpExp({left = exp1, oper = A.GeOp, right = exp2, pos = exp1left}))
  (* bool *)
  | exp AND exp
    (A.IfExp({test = exp1,
              then' = exp2,
              else' = SOME(A.IntExp(0)),
              pos = exp1left})
    )
  | exp OR exp
    (A.IfExp({test = exp1,
              then' = A.IntExp(1),
              else' = SOME exp2,
              pos = exp1left})
    )
  (* record *)
  | ID LBRACE recordfields RBRACE
    (A.RecordExp {fields = recordfields,
                  typ = symbol ID,
                  pos = IDleft}
    )
  (* sequence *)
  | LPAREN sequence RPAREN
    (sequence)
  (* assign *)
  | lvalue ASSIGN exp
    (A.AssignExp {var = lvalue, exp = exp, pos = lvalueleft})
  (* If-else *)
  | IF exp THEN exp
    (A.IfExp({test = exp1, then' = exp2, else' = NONE, pos = IFleft}))
  | IF exp THEN exp ELSE exp
    (A.IfExp({test = exp1, then' = exp2, else' = SOME exp3, pos = IFleft}))
  (* While *)
  | WHILE exp DO exp
    (A.WhileExp {test = exp1, body = exp2, pos = WHILEleft})
  (* For *)
  | FOR ID ASSIGN exp TO exp DO exp
    (A.ForExp {var = symbol ID,
               escape = ref true,
               lo = exp1,
               hi = exp2,
               body = exp3,
               pos = FORleft}
    )
  (* break *)
  | BREAK
    (A.BreakExp(BREAKleft))
  | LET decs IN sequence END
    (A.LetExp {decs = decs, body = sequence, pos = LETleft})
  (* array initial *)
  | ID LBRACK exp RBRACK OF exp
    (A.ArrayExp {typ = symbol ID, size = exp1, init = exp2, pos = IDleft})


(* ---- sequence ----*)
sequence:
  exp
    (exp)
  | exp sequence_suffix
    (A.SeqExp((exp, expleft) :: sequence_suffix))
  | (* empty *)
    (A.SeqExp(nil))

sequence_suffix:
  SEMICOLON exp sequence_suffix
    ((exp, expleft) :: sequence_suffix)
  | (* empty *)
    (nil)


(* ---- record params ----*)
recordfields:
  ID EQ exp
    ([(symbol ID, exp, IDleft)])
  | ID EQ exp COMMA recordfields
    ((symbol ID, exp, IDleft) :: recordfields)
  | (* empty *)
    (nil)
(* ---- call params ----*)
funparams:
  exp
    ([exp])
  | exp COMMA funparams
    (exp :: funparams)
  | (* empty *)
    (nil)

(* declare *)
dec:
  tydecs
    (A.TypeDec tydecs)
  | vardec
    (vardec)
  | fundecs
    (A.FunctionDec fundecs)

decs:
  dec decs
    (dec :: decs)
  | (* empty *)
    (nil)

(* ---- tydec ----*)
tydecs:
  tydec tydecs
    (tydec :: tydecs)
  | (* empty *)
    (nil)

tydec:
  TYPE ID EQ ty
    ({name = symbol ID, ty = ty, pos = TYPEleft})

ty:
  ID
  (* type-id *)
    (A.NameTy (symbol ID, IDleft))
  | LBRACE tyfields RBRACE
  (* {tyfields} *)
    (A.RecordTy (tyfields))
  | ARRAY OF ID
  (* array of type-id*)
    (A.ArrayTy (symbol ID, ARRAYleft))

tyfields:
  ID COLON ID
  (* id : type-id*)
    ([{name = symbol ID1,
       escape = ref true,
       typ = symbol ID2,
       pos = ID1left
      }]
    )
  | ID COLON ID COMMA tyfields
  (* id : type-id, id : type-id ....*)
    ({name = symbol ID1,
      escape = ref true,
      typ = symbol ID2,
      pos = ID1left
     } :: tyfields
    )
  | (* empty list*)
    (nil)

(* ---- vardec ----*)
vardec:
  VAR ID ASSIGN exp
  (* var id := exp *)
    (A.VarDec { name = symbol ID,
                escape = ref true,
                typ = NONE,
                init = exp,
                pos = VARleft }
    )
  | VAR ID COLON ID ASSIGN exp
  (* var id : type-id := exp*)
    (A.VarDec { name = symbol ID1,
                escape = ref true,
                typ = SOME (symbol ID2, ID2left),
                init = exp,
                pos = VARleft}
    )

(* ---- fundec ----*)
fundecs:
  fundec
    ([fundec])
  | fundecs fundec
    (fundecs @ [fundec])

fundec:
  FUNCTION ID LPAREN tyfields RPAREN EQ exp
  (* function id (tyfields) = exp *)
    ({name = symbol ID,
      params = tyfields,
      result = NONE,
      body = exp,
      pos = FUNCTIONleft}
    )
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
  (* function id (tyfields) : type-id = exp*)
    ({name = symbol ID1,
      params = tyfields,
      result = SOME (symbol ID2, ID2left),
      body = exp,
      pos = FUNCTIONleft}
    )

(* lvalue *)
lvalue:
  ID lvalue_back
    (retrive_suffix(A.SimpleVar(symbol ID, IDleft), lvalue_back, IDleft))
lvalue_back:
  DOT ID lvalue_back
    (DotID(symbol ID)::lvalue_back)
  | LBRACK exp RBRACK lvalue_back
    (ArrayIdx(exp)::lvalue_back)
  | (* empty *)
    (nil)
